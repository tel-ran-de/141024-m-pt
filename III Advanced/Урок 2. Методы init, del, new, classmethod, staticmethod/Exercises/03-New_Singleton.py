# Задание 1: Реализация Singleton для подключения к базе данных.
#
# Создайте класс DatabaseConnection, который будет реализовывать паттерн Singleton.
# Этот класс должен содержать информацию о подключении к базе данных и обеспечивать, что существует
# только один экземпляр подключения.
#
# Требования:
# Реализуйте класс DatabaseConnection с атрибутом класса _instance, который будет хранить единственный экземпляр класса.
# Метод __new__ должен гарантировать, что создается только один экземпляр класса.
# Реализуйте метод connect, который будет выводить сообщение о подключении к базе данных.
# Продемонстрируйте, что при создании нескольких объектов класса DatabaseConnection все они ссылаются на
# один и тот же экземпляр.
#
# Задание 2: Реализация Singleton для логгера.
#
# Создайте класс Logger для ведения логов, который будет реализовывать паттерн Singleton.
# Этот класс должен обеспечивать, что существует только один экземпляр логгера.
#
# Требования:
#
# Реализуйте класс Logger с атрибутом класса _instance, который будет хранить единственный экземпляр класса.
# Метод __new__ должен гарантировать, что создается только один экземпляр класса.
# Реализуйте метод log_message, который будет принимать строку и выводить сообщение о записи лога.
# Продемонстрируйте, что при создании нескольких объектов класса Logger все они ссылаются на один и тот же экземпляр.

class DatabaseConnection(object):
    _instance = None

    def __new__(cls, *args, **kwargs):
        if cls._instance is None:
            cls._instance = super().__new__(cls)
        return cls._instance

    def __init__(self, database_url):
        self.database_url = database_url

    def connect(self):
        print(f'Подключение к базе данных {self.database_url} установлено')


def main():
    db1 = DatabaseConnection('url_to_db1')
    db1.connect()

    db2 = DatabaseConnection('url_to_db2')
    db2.connect()

    db1.connect()

    print(db1 is db2)
    print(id(db1))
    print(id(db2))


if __name__ == '__main__':
    main()
