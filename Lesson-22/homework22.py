# Тема: map, filter, zip
def f(a):
    print(f'\n------{a}------')
# Задача 1: Применение функции map для преобразования чисел
# Напишите функцию `square`, которая принимает число и возвращает его квадрат.
# Используйте функцию `map`, чтобы применить эту функцию к списку чисел `[1, 2, 3, 4, 5]` и выведите результат.
#
f(4)
def square(a):
    return a**2

numbers = [1, 2, 3, 4, 5]
list_sq_num = list(map(square, numbers))
print(list_sq_num)
# Ожидаемый результат: [1, 4, 9, 16, 25]


# Задача 2: Применение функции filter для отбора четных чисел
# Напишите функцию `is_even`, которая принимает число и возвращает `True`, если число четное,
# и `False` в противном случае. Используйте функцию `filter`, чтобы отобрать четные числа из
# списка `[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]` и выведите результат.
#
numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
# Ожидаемый результат: [2, 4, 6, 8, 10]
f(18)
def is_even(a):
    return a % 2 == 0 and a != 0

list_even = list(filter(is_even,numbers))
print(list_even)

# Задача 3: Применение функции zip для объединения списков
# У вас есть два списка: `names = ["Alice", "Bob", "Charlie"]` и `ages = [25, 30, 35]`.
# Используйте функцию `zip`, чтобы создать список кортежей, где каждый кортеж содержит имя и возраст,
# и выведите результат.
f(32)
names = ["Alice", "Bob", "Charlie"]
ages = [25, 30, 35]

list_2_list = list(zip(names, ages))
print(list_2_list)
# Ожидаемый результат: [("Alice", 25), ("Bob", 30), ("Charlie", 35)]


# Задача 4: Применение функции map для преобразования строк в числа
# Напишите функцию `to_int`, которая принимает строку и возвращает ее преобразование в целое число.
# Используйте функцию `map`, чтобы применить эту функцию к списку строк `["1", "2", "3", "4", "5"]`
# и выведите результат.
f(45)
def to_int(a):
    return int(a)

str_numbers = ["1", "2", "3", "4", "5"]
print(list(map(to_int, str_numbers)))
# Ожидаемый результат: [1, 2, 3, 4, 5]


# Задача 5: Применение функции filter для отбора слов длиннее 4 символов
# Напишите функцию `longer_than_four`, которая принимает строку и возвращает `True`,
# если длина строки больше 4 символов, и `False` в противном случае. Используйте функцию `filter`,
# чтобы отобрать слова длиной больше 4 символов из списка `["apple", "kiwi", "banana", "pear"]` и выведите результат.
#
words = ["apple", "kiwi", "banana", "pear"]
# Ожидаемый результат: ["apple", "banana"]
f(58)
def longer_than_four(a):
    return len(a) > 4
print(list(filter(longer_than_four, words)))

# Тема: map, filter, zip для итераторов, генераторов и файлов с лямбда функциями

# Задача 1: Использование filter с генератором и лямбда функцией
# Напишите генератор, который возвращает числа от 1 до 20.
# Используйте функцию `filter` с лямбда функцией для отбора четных чисел и выведите результат.
# Ожидаемый результат: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]
f(72)
def gen_num():
    for i in range(1,21):
        yield i

print(list(filter(lambda i: i%2==0,gen_num())))

# Задача 2: Использование zip с итераторами и лямбда функцией
# Создайте два итератора: один для чисел от 1 до 5, другой для их квадратов. Используйте функцию `zip`,
# чтобы объединить эти итераторы в список кортежей, и примените лямбда функцию для их вывода
# в формате строки "число: квадрат".
# Ожидаемый результат: ['1: 1', '2: 4', '3: 9', '4: 16', '5: 25']
f(83)
numbers = iter(map(lambda i: i, range(1,6)))

num_squar = iter(map(lambda i: i*i, range(1,6)))
print(list(map(lambda i: f'{i[0]}: {i[1]}', zip(numbers, num_squar))))

# Задача 3: Использование map и filter с файлом и лямбда функцией
# Напишите генератор, который читает строки из файла `example.txt`.
# Используйте функцию `filter` с лямбда функцией, чтобы отобрать строки, содержащие слово "Python",
# и затем примените функцию `map` с лямбда функцией для преобразования этих строк в верхний регистр.
f(94)
file_path = 'text_files/example.txt'
def open_file():
    global file_path
    with open(file_path, 'r')as file:
        for line in file:
            yield line

filter_Python = filter(lambda line: 'Python' in line, open_file())
for i in list(map(lambda i: i.upper(), filter_Python)):
    print(i)


# Тема: Дополнительная практика

# Задача 1: Использование map с генератором и лямбда функцией для конвертации температур
# Напишите генератор, который возвращает температуры в Цельсиях от -10 до 10.
# Используйте функцию `map` с лямбда функцией для конвертации этих температур в Фаренгейты и выведите результат.
# Ожидаемый результат: [14.0, 15.8, 17.6, 19.4, 21.2, 23.0, 24.8, 26.6, 28.4, 30.2,
# 32.0, 33.8, 35.6, 37.4, 39.2, 41.0, 42.8, 44.6, 46.4, 48.2, 50.0]
f(113)
def gen_temp():
    for i in range(-10, 11):
        yield i

c = map(lambda a: a*9/5 +32, gen_temp())
print(list(c))

# Задача 2: Использование filter с итератором и лямбда функцией для фильтрации строк по длине
# Создайте итератор для списка строк `["hello", "world", "python", "is", "awesome"]`.
# Используйте функцию `filter` с лямбда функцией для отбора строк длиной более 5 символов и выведите результат.
# Ожидаемый результат: ['python', 'awesome']
f(126)
a= iter(["hello", "world", "python", "is", "awesome"])
c = filter(lambda i:  len(i)>5, a)

print(list(c))

# Задача 3: Использование zip и map для объединения и форматирования данных из двух генераторов
# Напишите два генератора: один для чисел от 1 до 3, другой для их кубов. Используйте функцию `zip`,
# чтобы объединить эти генераторы в список кортежей, и примените функцию `map` с лямбда функцией
# для вывода данных в формате строки "число: куб".
# Ожидаемый результат: ['1: 1', '2: 8', '3: 27']
f(136)
def gen1():
    for i in range(1,4):
        yield i
def gen2():
    for i in range(1,4):
        yield i**3
c = zip(gen1(), gen2())
n = map(lambda a: f"{a[0]}: {a[1]}" , c)

print(list(n))

# Задача 4: Использование filter и map с файлом для преобразования данных
# Напишите генератор, который читает строки из файла `data.txt`.
# Используйте функцию `filter` с лямбда функцией для отбора строк, содержащих числа.
# Затем примените функцию `map` с лямбда функцией для преобразования этих строк в целые числа и выведите результат.
f(153)
file_path = 'text_files/data.txt'
def read_file():
    global file_path
    with open(file_path) as file:
        for line in file:
            yield line

print(list(map(lambda i: int(i) , filter(lambda i:'1' in i or '2' in i or '3' in i or '4' in i or '5' in i or '6' in i or '7' in i or '8' in i or '9' in i or '0' in i, read_file() ))))


# Задача 5: Использование zip с итераторами для обработки данных из двух файлов
# Создайте два генератора, которые читают строки из файлов `file1.txt` и `file2.txt`.
# Используйте функцию `zip`, чтобы объединить данные из этих файлов, и примените лямбда функцию
# для вывода данных в формате "file1_line - file2_line".
f(168)
file_path1 = 'text_files/file1.txt'
file_path2 = 'text_files/file2.txt'
def read_file_1():
    global file_path1
    with open(file_path1) as file:
        for line in file:
            yield line

def read_file_2():
    global file_path2
    with open(file_path2) as file:
        for line in file:
            yield line

print(list(map(lambda line:f'{line[0]} - {line[1]}', zip(read_file_1(),read_file_2()))))


# a = str(map(lambda line:f'"{line[0]} - {line[1]}"', zip(read_file_1(),read_file_2())))
# b = a.replace('\\n', '')
# for i in b:
#     print(b)
#Почему а воспринимается питоном как map объект не смотря на str(190)